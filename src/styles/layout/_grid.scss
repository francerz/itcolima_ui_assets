@use './variables';
@use 'sass:math';

@mixin properties ($properties) {
    @each $p, $v in $properties {
        #{$p}: $v;
    }
}
@mixin upto ($properties, $media-properties) {
    $prev-size: null;
    @each $size, $min-width in variables.$grid-breakpoints {
        @if $prev-size {
            &-upto-#{$prev-size} {
                @include properties($properties);
                @media (max-width: #{$min-width - 1}) {
                    @include properties($media-properties);
                }
            }
        }
        $prev-size: $size;
    }
}

$row: (
    display: flex
);

.row, %row {
    @include properties($row);
    &--column {
        @include properties($row);
        flex-direction: column;
        @include upto($row, (flex-direction: column));
    }
    &--wrap {
        @include properties($row);
        flex-wrap: wrap;
    }
    &--nowrap {
        @include properties($row);
        flex-wrap: nowrap;
        @each $size, $min-width in variables.$grid-breakpoints {
            @media (min-width: $min-width) {
                &-#{$size} {
                    @include properties($row);
                    flex-wrap: nowrap;
                }
            }
        }
    }
    &--center {
        @include properties($row);
        justify-content: center;
    }
    &--between {
        @include properties($row);
        justify-content: space-between;
    }
    &--around {
        @include properties($row);
        justify-content: space-around;
    }
    &--end {
        @include properties($row);
        justify-content: end;
    }
    &--full-height {
        @include properties($row);
        height: 100vh;
    }
    &--vcenter {
        @include properties($row);
        align-items: center;
    }
    &--gap1 {
        @include properties($row);
        gap: 1rem;
    }
    &--gap2 {
        @include properties($row);
        gap: 2rem;
    }
}
$col: (
    flex-grow: 999999,
    max-width: 100%,
    margin-left: 0,
    margin-right: 0,
);

.col, %col {
    @include properties($col);
    &-auto {
        @include properties($col);
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
    }
    @for $col from 12 through 1 {
        &-#{$col} {
            @include properties($col);
            flex: 0 0 percentage(math.div($col, 12));
            max-width: percentage(math.div($col, 12));
        }
    }
    @each $size, $min-width in variables.$grid-breakpoints {
        @for $col from 12 through 1 {
            @media (min-width: $min-width) {
                &-#{$size}-#{$col} {
                    @include properties($col);
                    flex: 0 0 percentage(math.div($col, 12));
                    max-width: percentage(math.div($col, 12));
                }
            }
        }
    }
}

.min {
    @each $size, $min-width in variables.$container-max-widths {
        &-#{$size} {
            min-width: $min-width !important;
        }
    }
}

.upto {
    $prev-size: null;
    @each $size, $min-width in variables.$grid-breakpoints {
        @if $prev-size {
            @media (min-width: $min-width) {
                &-#{$prev-size} {
                    display: none !important;
                }
            }
        }
        $prev-size: $size;
    }
}
.from {
    $prev-size: null;
    @each $size, $min-width in variables.$grid-breakpoints {
        @media (max-width: #{$min-width - 1}) {
            &-#{$size} {
                display: none !important;
            }
        }
    }
}